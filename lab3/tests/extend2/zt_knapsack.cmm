
int max(int a, int b) {
    if (a >= b)
        return a;
    else return b;
}

int knapsack(int n, int w[15], int v[15], int x[15], int C) {
    int V[200][200];
    int i, j;

    i = 0;
    while (i <= n) {
        V[i][0] = 0;
        i = i + 1;
    }
    j = 0;
    while (j <= C) {
        V[0][j] = 0;
        j = j + 1;
    }

    i = 1;
    while (i <= n) {
        j = 1;
        while (j <= C) {
            if (j < w[i - 1]) {
                V[i][j] = V[i - 1][j];
            } else {
                V[i][j] = max(V[i - 1][j], V[i - 1][j - w[i - 1]] + v[i - 1]);
            }
            j = j + 1;
        }
        i = i + 1;
    }

    j = C;
    i = n;
    while (i >= 1) {
        if (V[i][j] > V[i - 1][j]) {
            x[i] = 1;
            j = j - w[i - 1];
        } else
            x[i] = 0;
        i = i - 1;
    }

    return V[n][C];

}

int main() {
    int ms;
    int mw[15];
    int mv[15];
    int mx[15];
    int mn, mi;
    int mC;

    mC = 10;

    mn = 5;

    mw[0] = 2;
    mw[1] = 2;
    mw[2] = 6;
    mw[3] = 5;
    mw[4] = 4;


    mv[0] = 6;
    mv[1] = 3;
    mv[2] = 5;
    mv[3] = 4;
    mv[4] = 6;

    ms = knapsack(mn, mw, mv, mx, mC);

    write(ms);
    return 0;
}
