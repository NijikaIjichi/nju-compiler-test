int merge(int a[6], int l, int m, int r)
{
    int la[10], ra[10];
    int i, j, k;
    int n1 = m - (l - 1);
    int n2 = r - m;

    i = 0;
    while (i < n1) {
        la[i] = a[l + i];
        i = i + 1;
    }
    j = 0;
    while (j < n2) {
        ra[j] = a[m + 1 + j];
        j = j + 1;
    }

    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2) {
        if (la[i] <= ra[j]) {
            a[k] = la[i];
            i = i + 1;
        }
        else {
            a[k] = ra[j];
            j = j + 1;
        }
        k = k + 1;
    }

    while (i < n1) {
        a[k] = la[i];
        i = i + 1;
        k = k + 1;
    }

    while (j < n2) {
        a[k] = ra[j];
        j = j + 1;
        k = k + 1;
    }
    return 0;
}

int merge_sort(int arr[6], int start, int end){
    int mid = 0;
    if (start >= end) {
        return 0;
    }
    mid = start + (end - start) / 2;
    merge_sort(arr, start, mid);
    merge_sort(arr, mid + 1, end);
    merge(arr, start, mid, end);
    return 0;
}

int main()
{
    int n = 6;
    int array[6];
    int c = 0;
    while (c < n) {
        array[c] = read();
        c = c + 1;
    }

    merge_sort(array, 0, n - 1);

    c = 0;
    while (c < n) {
        write(array[c]);
        c = c + 1;
    }
    return 0;
}
